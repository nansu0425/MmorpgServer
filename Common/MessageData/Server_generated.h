// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVER_MESSAGEDATA_SERVER_H_
#define FLATBUFFERS_GENERATED_SERVER_MESSAGEDATA_SERVER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Common_generated.h"

namespace MessageData {
namespace Server {

struct Test;
struct TestBuilder;

struct Login;
struct LoginBuilder;

struct Test FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_HP = 6,
    VT_ATTACK = 8,
    VT_BUFFS = 10,
    VT_PLAYER_TYPE = 12
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  int32_t hp() const {
    return GetField<int32_t>(VT_HP, 0);
  }
  int16_t attack() const {
    return GetField<int16_t>(VT_ATTACK, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<MessageData::Buff>> *buffs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<MessageData::Buff>> *>(VT_BUFFS);
  }
  MessageData::PlayerType player_type() const {
    return static_cast<MessageData::PlayerType>(GetField<int8_t>(VT_PLAYER_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID, 8) &&
           VerifyField<int32_t>(verifier, VT_HP, 4) &&
           VerifyField<int16_t>(verifier, VT_ATTACK, 2) &&
           VerifyOffset(verifier, VT_BUFFS) &&
           verifier.VerifyVector(buffs()) &&
           verifier.VerifyVectorOfTables(buffs()) &&
           VerifyField<int8_t>(verifier, VT_PLAYER_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct TestBuilder {
  typedef Test Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(Test::VT_ID, id, 0);
  }
  void add_hp(int32_t hp) {
    fbb_.AddElement<int32_t>(Test::VT_HP, hp, 0);
  }
  void add_attack(int16_t attack) {
    fbb_.AddElement<int16_t>(Test::VT_ATTACK, attack, 0);
  }
  void add_buffs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MessageData::Buff>>> buffs) {
    fbb_.AddOffset(Test::VT_BUFFS, buffs);
  }
  void add_player_type(MessageData::PlayerType player_type) {
    fbb_.AddElement<int8_t>(Test::VT_PLAYER_TYPE, static_cast<int8_t>(player_type), 0);
  }
  explicit TestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Test>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Test> CreateTest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    int32_t hp = 0,
    int16_t attack = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MessageData::Buff>>> buffs = 0,
    MessageData::PlayerType player_type = MessageData::PlayerType_None) {
  TestBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_buffs(buffs);
  builder_.add_hp(hp);
  builder_.add_attack(attack);
  builder_.add_player_type(player_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Test> CreateTestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    int32_t hp = 0,
    int16_t attack = 0,
    const std::vector<::flatbuffers::Offset<MessageData::Buff>> *buffs = nullptr,
    MessageData::PlayerType player_type = MessageData::PlayerType_None) {
  auto buffs__ = buffs ? _fbb.CreateVector<::flatbuffers::Offset<MessageData::Buff>>(*buffs) : 0;
  return MessageData::Server::CreateTest(
      _fbb,
      id,
      hp,
      attack,
      buffs__,
      player_type);
}

struct Login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_ID = 6
  };
  MessageData::LoginStatus status() const {
    return static_cast<MessageData::LoginStatus>(GetField<int8_t>(VT_STATUS, 0));
  }
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS, 1) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           verifier.EndTable();
  }
};

struct LoginBuilder {
  typedef Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_status(MessageData::LoginStatus status) {
    fbb_.AddElement<int8_t>(Login::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Login::VT_ID, id);
  }
  explicit LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Login> CreateLogin(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    MessageData::LoginStatus status = MessageData::LoginStatus_Failure,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0) {
  LoginBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_status(status);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Login> CreateLoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    MessageData::LoginStatus status = MessageData::LoginStatus_Failure,
    const char *id = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  return MessageData::Server::CreateLogin(
      _fbb,
      status,
      id__);
}

}  // namespace Server
}  // namespace MessageData

#endif  // FLATBUFFERS_GENERATED_SERVER_MESSAGEDATA_SERVER_H_
