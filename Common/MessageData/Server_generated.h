// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVER_MESSAGEDATA_SERVER_H_
#define FLATBUFFERS_GENERATED_SERVER_MESSAGEDATA_SERVER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Common_generated.h"

namespace MessageData {
namespace Server {

struct Login;
struct LoginBuilder;

struct EnterGame;
struct EnterGameBuilder;

struct Chat;
struct ChatBuilder;

struct Login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4,
    VT_PLAYERS = 6
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<MessageData::Player>> *players() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<MessageData::Player>> *>(VT_PLAYERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           VerifyOffset(verifier, VT_PLAYERS) &&
           verifier.VerifyVector(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           verifier.EndTable();
  }
};

struct LoginBuilder {
  typedef Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(Login::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  void add_players(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MessageData::Player>>> players) {
    fbb_.AddOffset(Login::VT_PLAYERS, players);
  }
  explicit LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Login> CreateLogin(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MessageData::Player>>> players = 0) {
  LoginBuilder builder_(_fbb);
  builder_.add_players(players);
  builder_.add_success(success);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Login> CreateLoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    const std::vector<::flatbuffers::Offset<MessageData::Player>> *players = nullptr) {
  auto players__ = players ? _fbb.CreateVector<::flatbuffers::Offset<MessageData::Player>>(*players) : 0;
  return MessageData::Server::CreateLogin(
      _fbb,
      success,
      players__);
}

struct EnterGame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EnterGameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           verifier.EndTable();
  }
};

struct EnterGameBuilder {
  typedef EnterGame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(EnterGame::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit EnterGameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EnterGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EnterGame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EnterGame> CreateEnterGame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false) {
  EnterGameBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

struct Chat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_MESSAGE = 6
  };
  int64_t player_id() const {
    return GetField<int64_t>(VT_PLAYER_ID, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_PLAYER_ID, 8) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct ChatBuilder {
  typedef Chat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(int64_t player_id) {
    fbb_.AddElement<int64_t>(Chat::VT_PLAYER_ID, player_id, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(Chat::VT_MESSAGE, message);
  }
  explicit ChatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Chat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Chat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Chat> CreateChat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t player_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  ChatBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_message(message);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Chat> CreateChatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t player_id = 0,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return MessageData::Server::CreateChat(
      _fbb,
      player_id,
      message__);
}

}  // namespace Server
}  // namespace MessageData

#endif  // FLATBUFFERS_GENERATED_SERVER_MESSAGEDATA_SERVER_H_
