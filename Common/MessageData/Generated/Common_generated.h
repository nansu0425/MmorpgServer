// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMON_MESSAGEDATA_H_
#define FLATBUFFERS_GENERATED_COMMON_MESSAGEDATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace MessageData {

struct Buff;
struct BuffBuilder;

enum PlayerType : int8_t {
  PlayerType_None = 0,
  PlayerType_Knight = 1,
  PlayerType_Wizard = 2,
  PlayerType_Archer = 3,
  PlayerType_MIN = PlayerType_None,
  PlayerType_MAX = PlayerType_Archer
};

inline const PlayerType (&EnumValuesPlayerType())[4] {
  static const PlayerType values[] = {
    PlayerType_None,
    PlayerType_Knight,
    PlayerType_Wizard,
    PlayerType_Archer
  };
  return values;
}

inline const char * const *EnumNamesPlayerType() {
  static const char * const names[5] = {
    "None",
    "Knight",
    "Wizard",
    "Archer",
    nullptr
  };
  return names;
}

inline const char *EnumNamePlayerType(PlayerType e) {
  if (::flatbuffers::IsOutRange(e, PlayerType_None, PlayerType_Archer)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPlayerType()[index];
}

struct Buff FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BuffBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_REMAIN_TIME = 6,
    VT_VICTIMS = 8
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  float remain_time() const {
    return GetField<float>(VT_REMAIN_TIME, 0.0f);
  }
  const ::flatbuffers::Vector<int64_t> *victims() const {
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_VICTIMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID, 8) &&
           VerifyField<float>(verifier, VT_REMAIN_TIME, 4) &&
           VerifyOffset(verifier, VT_VICTIMS) &&
           verifier.VerifyVector(victims()) &&
           verifier.EndTable();
  }
};

struct BuffBuilder {
  typedef Buff Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(Buff::VT_ID, id, 0);
  }
  void add_remain_time(float remain_time) {
    fbb_.AddElement<float>(Buff::VT_REMAIN_TIME, remain_time, 0.0f);
  }
  void add_victims(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> victims) {
    fbb_.AddOffset(Buff::VT_VICTIMS, victims);
  }
  explicit BuffBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Buff> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Buff>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Buff> CreateBuff(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    float remain_time = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> victims = 0) {
  BuffBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_victims(victims);
  builder_.add_remain_time(remain_time);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Buff> CreateBuffDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    float remain_time = 0.0f,
    const std::vector<int64_t> *victims = nullptr) {
  auto victims__ = victims ? _fbb.CreateVector<int64_t>(*victims) : 0;
  return MessageData::CreateBuff(
      _fbb,
      id,
      remain_time,
      victims__);
}

}  // namespace MessageData

#endif  // FLATBUFFERS_GENERATED_COMMON_MESSAGEDATA_H_
