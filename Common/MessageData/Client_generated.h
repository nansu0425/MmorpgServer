// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENT_MESSAGEDATA_CLIENT_H_
#define FLATBUFFERS_GENERATED_CLIENT_MESSAGEDATA_CLIENT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Common_generated.h"

namespace MessageData {
namespace Client {

struct Login;
struct LoginBuilder;

struct EnterGame;
struct EnterGameBuilder;

struct Chat;
struct ChatBuilder;

struct Login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct LoginBuilder {
  typedef Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Login::VT_ID, id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(Login::VT_PASSWORD, password);
  }
  explicit LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Login> CreateLogin(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  LoginBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Login> CreateLoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *password = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return MessageData::Client::CreateLogin(
      _fbb,
      id__,
      password__);
}

struct EnterGame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EnterGameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_IDX = 4
  };
  int64_t player_idx() const {
    return GetField<int64_t>(VT_PLAYER_IDX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_PLAYER_IDX, 8) &&
           verifier.EndTable();
  }
};

struct EnterGameBuilder {
  typedef EnterGame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_idx(int64_t player_idx) {
    fbb_.AddElement<int64_t>(EnterGame::VT_PLAYER_IDX, player_idx, 0);
  }
  explicit EnterGameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EnterGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EnterGame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EnterGame> CreateEnterGame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t player_idx = 0) {
  EnterGameBuilder builder_(_fbb);
  builder_.add_player_idx(player_idx);
  return builder_.Finish();
}

struct Chat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct ChatBuilder {
  typedef Chat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(Chat::VT_MESSAGE, message);
  }
  explicit ChatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Chat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Chat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Chat> CreateChat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  ChatBuilder builder_(_fbb);
  builder_.add_message(message);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Chat> CreateChatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return MessageData::Client::CreateChat(
      _fbb,
      message__);
}

}  // namespace Client
}  // namespace MessageData

#endif  // FLATBUFFERS_GENERATED_CLIENT_MESSAGEDATA_CLIENT_H_
