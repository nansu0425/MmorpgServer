// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Packet.proto
// Protobuf C++ Version: 5.29.1

#ifndef Packet_2eproto_2epb_2eh
#define Packet_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "ServerPayload.pb.h"
#include "ClientPayload.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Packet_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Packet_2eproto;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class PacketHeader;
struct PacketHeaderDefaultTypeInternal;
extern PacketHeaderDefaultTypeInternal _PacketHeader_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class PacketHeader final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PacketHeader) */ {
 public:
  inline PacketHeader() : PacketHeader(nullptr) {}
  ~PacketHeader() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PacketHeader* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PacketHeader));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PacketHeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline PacketHeader(const PacketHeader& from) : PacketHeader(nullptr, from) {}
  inline PacketHeader(PacketHeader&& from) noexcept
      : PacketHeader(nullptr, std::move(from)) {}
  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketHeader& operator=(PacketHeader&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketHeader* internal_default_instance() {
    return reinterpret_cast<const PacketHeader*>(
        &_PacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PacketHeader& a, PacketHeader& b) { a.Swap(&b); }
  inline void Swap(PacketHeader* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketHeader* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PacketHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PacketHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PacketHeader& from) { PacketHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PacketHeader* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "PacketHeader"; }

 protected:
  explicit PacketHeader(::google::protobuf::Arena* arena);
  PacketHeader(::google::protobuf::Arena* arena, const PacketHeader& from);
  PacketHeader(::google::protobuf::Arena* arena, PacketHeader&& from) noexcept
      : PacketHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSizeFieldNumber = 1,
  };
  // int32 size = 1;
  void clear_size() ;
  ::int32_t size() const;
  void set_size(::int32_t value);

  private:
  ::int32_t _internal_size() const;
  void _internal_set_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PacketHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PacketHeader& from_msg);
    ::int32_t size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class Packet final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Packet* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Packet));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Packet(
      ::google::protobuf::internal::ConstantInitialized);

  inline Packet(const Packet& from) : Packet(nullptr, from) {}
  inline Packet(Packet&& from) noexcept
      : Packet(nullptr, std::move(from)) {}
  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kLoginRequest = 1000,
    kLoginResponse = 1001,
    kChatRequest = 1002,
    kChatNotify = 1003,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
        &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Packet& a, Packet& b) { a.Swap(&b); }
  inline void Swap(Packet* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Packet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Packet& from) { Packet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Packet* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Packet"; }

 protected:
  explicit Packet(::google::protobuf::Arena* arena);
  Packet(::google::protobuf::Arena* arena, const Packet& from);
  Packet(::google::protobuf::Arena* arena, Packet&& from) noexcept
      : Packet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kLoginRequestFieldNumber = 1000,
    kLoginResponseFieldNumber = 1001,
    kChatRequestFieldNumber = 1002,
    kChatNotifyFieldNumber = 1003,
  };
  // .PacketHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::PacketHeader& header() const;
  PROTOBUF_NODISCARD ::PacketHeader* release_header();
  ::PacketHeader* mutable_header();
  void set_allocated_header(::PacketHeader* value);
  void unsafe_arena_set_allocated_header(::PacketHeader* value);
  ::PacketHeader* unsafe_arena_release_header();

  private:
  const ::PacketHeader& _internal_header() const;
  ::PacketHeader* _internal_mutable_header();

  public:
  // .LoginRequest login_request = 1000;
  bool has_login_request() const;
  private:
  bool _internal_has_login_request() const;

  public:
  void clear_login_request() ;
  const ::LoginRequest& login_request() const;
  PROTOBUF_NODISCARD ::LoginRequest* release_login_request();
  ::LoginRequest* mutable_login_request();
  void set_allocated_login_request(::LoginRequest* value);
  void unsafe_arena_set_allocated_login_request(::LoginRequest* value);
  ::LoginRequest* unsafe_arena_release_login_request();

  private:
  const ::LoginRequest& _internal_login_request() const;
  ::LoginRequest* _internal_mutable_login_request();

  public:
  // .LoginResponse login_response = 1001;
  bool has_login_response() const;
  private:
  bool _internal_has_login_response() const;

  public:
  void clear_login_response() ;
  const ::LoginResponse& login_response() const;
  PROTOBUF_NODISCARD ::LoginResponse* release_login_response();
  ::LoginResponse* mutable_login_response();
  void set_allocated_login_response(::LoginResponse* value);
  void unsafe_arena_set_allocated_login_response(::LoginResponse* value);
  ::LoginResponse* unsafe_arena_release_login_response();

  private:
  const ::LoginResponse& _internal_login_response() const;
  ::LoginResponse* _internal_mutable_login_response();

  public:
  // .ChatRequest chat_request = 1002;
  bool has_chat_request() const;
  private:
  bool _internal_has_chat_request() const;

  public:
  void clear_chat_request() ;
  const ::ChatRequest& chat_request() const;
  PROTOBUF_NODISCARD ::ChatRequest* release_chat_request();
  ::ChatRequest* mutable_chat_request();
  void set_allocated_chat_request(::ChatRequest* value);
  void unsafe_arena_set_allocated_chat_request(::ChatRequest* value);
  ::ChatRequest* unsafe_arena_release_chat_request();

  private:
  const ::ChatRequest& _internal_chat_request() const;
  ::ChatRequest* _internal_mutable_chat_request();

  public:
  // .ChatNotify chat_notify = 1003;
  bool has_chat_notify() const;
  private:
  bool _internal_has_chat_notify() const;

  public:
  void clear_chat_notify() ;
  const ::ChatNotify& chat_notify() const;
  PROTOBUF_NODISCARD ::ChatNotify* release_chat_notify();
  ::ChatNotify* mutable_chat_notify();
  void set_allocated_chat_notify(::ChatNotify* value);
  void unsafe_arena_set_allocated_chat_notify(::ChatNotify* value);
  ::ChatNotify* unsafe_arena_release_chat_notify();

  private:
  const ::ChatNotify& _internal_chat_notify() const;
  ::ChatNotify* _internal_mutable_chat_notify();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:Packet)
 private:
  class _Internal;
  void set_has_login_request();
  void set_has_login_response();
  void set_has_chat_request();
  void set_has_chat_notify();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 5,
      0, 7>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Packet& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::PacketHeader* header_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::LoginRequest* login_request_;
      ::LoginResponse* login_response_;
      ::ChatRequest* chat_request_;
      ::ChatNotify* chat_notify_;
    } payload_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PacketHeader

// int32 size = 1;
inline void PacketHeader::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = 0;
}
inline ::int32_t PacketHeader::size() const {
  // @@protoc_insertion_point(field_get:PacketHeader.size)
  return _internal_size();
}
inline void PacketHeader::set_size(::int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:PacketHeader.size)
}
inline ::int32_t PacketHeader::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void PacketHeader::_internal_set_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// -------------------------------------------------------------------

// Packet

// .PacketHeader header = 1;
inline bool Packet::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline void Packet::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::PacketHeader& Packet::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::PacketHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::PacketHeader&>(::_PacketHeader_default_instance_);
}
inline const ::PacketHeader& Packet::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Packet.header)
  return _internal_header();
}
inline void Packet::unsafe_arena_set_allocated_header(::PacketHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::PacketHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.header)
}
inline ::PacketHeader* Packet::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PacketHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::PacketHeader* Packet::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Packet.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PacketHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::PacketHeader* Packet::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::PacketHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::PacketHeader*>(p);
  }
  return _impl_.header_;
}
inline ::PacketHeader* Packet::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::PacketHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:Packet.header)
  return _msg;
}
inline void Packet::set_allocated_header(::PacketHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::PacketHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:Packet.header)
}

// .LoginRequest login_request = 1000;
inline bool Packet::has_login_request() const {
  return payload_case() == kLoginRequest;
}
inline bool Packet::_internal_has_login_request() const {
  return payload_case() == kLoginRequest;
}
inline void Packet::set_has_login_request() {
  _impl_._oneof_case_[0] = kLoginRequest;
}
inline ::LoginRequest* Packet::release_login_request() {
  // @@protoc_insertion_point(field_release:Packet.login_request)
  if (payload_case() == kLoginRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.login_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.login_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginRequest& Packet::_internal_login_request() const {
  return payload_case() == kLoginRequest ? *_impl_.payload_.login_request_ : reinterpret_cast<::LoginRequest&>(::_LoginRequest_default_instance_);
}
inline const ::LoginRequest& Packet::login_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Packet.login_request)
  return _internal_login_request();
}
inline ::LoginRequest* Packet::unsafe_arena_release_login_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.login_request)
  if (payload_case() == kLoginRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.login_request_;
    _impl_.payload_.login_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_login_request(::LoginRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_login_request();
    _impl_.payload_.login_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.login_request)
}
inline ::LoginRequest* Packet::_internal_mutable_login_request() {
  if (payload_case() != kLoginRequest) {
    clear_payload();
    set_has_login_request();
    _impl_.payload_.login_request_ =
        ::google::protobuf::Message::DefaultConstruct<::LoginRequest>(GetArena());
  }
  return _impl_.payload_.login_request_;
}
inline ::LoginRequest* Packet::mutable_login_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::LoginRequest* _msg = _internal_mutable_login_request();
  // @@protoc_insertion_point(field_mutable:Packet.login_request)
  return _msg;
}

// .LoginResponse login_response = 1001;
inline bool Packet::has_login_response() const {
  return payload_case() == kLoginResponse;
}
inline bool Packet::_internal_has_login_response() const {
  return payload_case() == kLoginResponse;
}
inline void Packet::set_has_login_response() {
  _impl_._oneof_case_[0] = kLoginResponse;
}
inline ::LoginResponse* Packet::release_login_response() {
  // @@protoc_insertion_point(field_release:Packet.login_response)
  if (payload_case() == kLoginResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.login_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.login_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginResponse& Packet::_internal_login_response() const {
  return payload_case() == kLoginResponse ? *_impl_.payload_.login_response_ : reinterpret_cast<::LoginResponse&>(::_LoginResponse_default_instance_);
}
inline const ::LoginResponse& Packet::login_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Packet.login_response)
  return _internal_login_response();
}
inline ::LoginResponse* Packet::unsafe_arena_release_login_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.login_response)
  if (payload_case() == kLoginResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.login_response_;
    _impl_.payload_.login_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_login_response(::LoginResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_login_response();
    _impl_.payload_.login_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.login_response)
}
inline ::LoginResponse* Packet::_internal_mutable_login_response() {
  if (payload_case() != kLoginResponse) {
    clear_payload();
    set_has_login_response();
    _impl_.payload_.login_response_ =
        ::google::protobuf::Message::DefaultConstruct<::LoginResponse>(GetArena());
  }
  return _impl_.payload_.login_response_;
}
inline ::LoginResponse* Packet::mutable_login_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::LoginResponse* _msg = _internal_mutable_login_response();
  // @@protoc_insertion_point(field_mutable:Packet.login_response)
  return _msg;
}

// .ChatRequest chat_request = 1002;
inline bool Packet::has_chat_request() const {
  return payload_case() == kChatRequest;
}
inline bool Packet::_internal_has_chat_request() const {
  return payload_case() == kChatRequest;
}
inline void Packet::set_has_chat_request() {
  _impl_._oneof_case_[0] = kChatRequest;
}
inline ::ChatRequest* Packet::release_chat_request() {
  // @@protoc_insertion_point(field_release:Packet.chat_request)
  if (payload_case() == kChatRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.chat_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.chat_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChatRequest& Packet::_internal_chat_request() const {
  return payload_case() == kChatRequest ? *_impl_.payload_.chat_request_ : reinterpret_cast<::ChatRequest&>(::_ChatRequest_default_instance_);
}
inline const ::ChatRequest& Packet::chat_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Packet.chat_request)
  return _internal_chat_request();
}
inline ::ChatRequest* Packet::unsafe_arena_release_chat_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.chat_request)
  if (payload_case() == kChatRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.chat_request_;
    _impl_.payload_.chat_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_chat_request(::ChatRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_chat_request();
    _impl_.payload_.chat_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.chat_request)
}
inline ::ChatRequest* Packet::_internal_mutable_chat_request() {
  if (payload_case() != kChatRequest) {
    clear_payload();
    set_has_chat_request();
    _impl_.payload_.chat_request_ =
        ::google::protobuf::Message::DefaultConstruct<::ChatRequest>(GetArena());
  }
  return _impl_.payload_.chat_request_;
}
inline ::ChatRequest* Packet::mutable_chat_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ChatRequest* _msg = _internal_mutable_chat_request();
  // @@protoc_insertion_point(field_mutable:Packet.chat_request)
  return _msg;
}

// .ChatNotify chat_notify = 1003;
inline bool Packet::has_chat_notify() const {
  return payload_case() == kChatNotify;
}
inline bool Packet::_internal_has_chat_notify() const {
  return payload_case() == kChatNotify;
}
inline void Packet::set_has_chat_notify() {
  _impl_._oneof_case_[0] = kChatNotify;
}
inline ::ChatNotify* Packet::release_chat_notify() {
  // @@protoc_insertion_point(field_release:Packet.chat_notify)
  if (payload_case() == kChatNotify) {
    clear_has_payload();
    auto* temp = _impl_.payload_.chat_notify_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.chat_notify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChatNotify& Packet::_internal_chat_notify() const {
  return payload_case() == kChatNotify ? *_impl_.payload_.chat_notify_ : reinterpret_cast<::ChatNotify&>(::_ChatNotify_default_instance_);
}
inline const ::ChatNotify& Packet::chat_notify() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Packet.chat_notify)
  return _internal_chat_notify();
}
inline ::ChatNotify* Packet::unsafe_arena_release_chat_notify() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.chat_notify)
  if (payload_case() == kChatNotify) {
    clear_has_payload();
    auto* temp = _impl_.payload_.chat_notify_;
    _impl_.payload_.chat_notify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_chat_notify(::ChatNotify* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_chat_notify();
    _impl_.payload_.chat_notify_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.chat_notify)
}
inline ::ChatNotify* Packet::_internal_mutable_chat_notify() {
  if (payload_case() != kChatNotify) {
    clear_payload();
    set_has_chat_notify();
    _impl_.payload_.chat_notify_ =
        ::google::protobuf::Message::DefaultConstruct<::ChatNotify>(GetArena());
  }
  return _impl_.payload_.chat_notify_;
}
inline ::ChatNotify* Packet::mutable_chat_notify() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ChatNotify* _msg = _internal_mutable_chat_notify();
  // @@protoc_insertion_point(field_mutable:Packet.chat_notify)
  return _msg;
}

inline bool Packet::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Packet::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Packet::PayloadCase Packet::payload_case() const {
  return Packet::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // Packet_2eproto_2epb_2eh
