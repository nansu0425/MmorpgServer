// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STEST_PACKET_H_
#define FLATBUFFERS_GENERATED_STEST_PACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Packet {

struct Buff;
struct BuffBuilder;

struct S_Test;
struct S_TestBuilder;

struct Buff FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BuffBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_REMAIN_TIME = 6,
    VT_VICTIMS = 8
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  float remain_time() const {
    return GetField<float>(VT_REMAIN_TIME, 0.0f);
  }
  const ::flatbuffers::Vector<int64_t> *victims() const {
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_VICTIMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID, 8) &&
           VerifyField<float>(verifier, VT_REMAIN_TIME, 4) &&
           VerifyOffset(verifier, VT_VICTIMS) &&
           verifier.VerifyVector(victims()) &&
           verifier.EndTable();
  }
};

struct BuffBuilder {
  typedef Buff Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(Buff::VT_ID, id, 0);
  }
  void add_remain_time(float remain_time) {
    fbb_.AddElement<float>(Buff::VT_REMAIN_TIME, remain_time, 0.0f);
  }
  void add_victims(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> victims) {
    fbb_.AddOffset(Buff::VT_VICTIMS, victims);
  }
  explicit BuffBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Buff> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Buff>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Buff> CreateBuff(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    float remain_time = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> victims = 0) {
  BuffBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_victims(victims);
  builder_.add_remain_time(remain_time);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Buff> CreateBuffDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    float remain_time = 0.0f,
    const std::vector<int64_t> *victims = nullptr) {
  auto victims__ = victims ? _fbb.CreateVector<int64_t>(*victims) : 0;
  return Packet::CreateBuff(
      _fbb,
      id,
      remain_time,
      victims__);
}

struct S_Test FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S_TestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_HP = 6,
    VT_ATTACK = 8,
    VT_BUFFS = 10
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  int32_t hp() const {
    return GetField<int32_t>(VT_HP, 0);
  }
  int16_t attack() const {
    return GetField<int16_t>(VT_ATTACK, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Packet::Buff>> *buffs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Packet::Buff>> *>(VT_BUFFS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID, 8) &&
           VerifyField<int32_t>(verifier, VT_HP, 4) &&
           VerifyField<int16_t>(verifier, VT_ATTACK, 2) &&
           VerifyOffset(verifier, VT_BUFFS) &&
           verifier.VerifyVector(buffs()) &&
           verifier.VerifyVectorOfTables(buffs()) &&
           verifier.EndTable();
  }
};

struct S_TestBuilder {
  typedef S_Test Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(S_Test::VT_ID, id, 0);
  }
  void add_hp(int32_t hp) {
    fbb_.AddElement<int32_t>(S_Test::VT_HP, hp, 0);
  }
  void add_attack(int16_t attack) {
    fbb_.AddElement<int16_t>(S_Test::VT_ATTACK, attack, 0);
  }
  void add_buffs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Packet::Buff>>> buffs) {
    fbb_.AddOffset(S_Test::VT_BUFFS, buffs);
  }
  explicit S_TestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S_Test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S_Test>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S_Test> CreateS_Test(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    int32_t hp = 0,
    int16_t attack = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Packet::Buff>>> buffs = 0) {
  S_TestBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_buffs(buffs);
  builder_.add_hp(hp);
  builder_.add_attack(attack);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S_Test> CreateS_TestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    int32_t hp = 0,
    int16_t attack = 0,
    const std::vector<::flatbuffers::Offset<Packet::Buff>> *buffs = nullptr) {
  auto buffs__ = buffs ? _fbb.CreateVector<::flatbuffers::Offset<Packet::Buff>>(*buffs) : 0;
  return Packet::CreateS_Test(
      _fbb,
      id,
      hp,
      attack,
      buffs__);
}

inline const Packet::S_Test *GetS_Test(const void *buf) {
  return ::flatbuffers::GetRoot<Packet::S_Test>(buf);
}

inline const Packet::S_Test *GetSizePrefixedS_Test(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Packet::S_Test>(buf);
}

inline bool VerifyS_TestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::S_Test>(nullptr);
}

inline bool VerifySizePrefixedS_TestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::S_Test>(nullptr);
}

inline void FinishS_TestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Packet::S_Test> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedS_TestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Packet::S_Test> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_STEST_PACKET_H_
